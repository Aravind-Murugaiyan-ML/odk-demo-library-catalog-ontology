# Template Files Copy Makefile
# Copies template files to workflow directory

# Configuration Variables
RFD_DEV_SPACE_HOME := ../../develop-rfd
PROJECT_NAME := library-catalog-ontology
PROJECT_DIR := $(RFD_DEV_SPACE_HOME)/$(PROJECT_NAME)
DOMAIN := lco
WORKFLOW_DIR := $(PROJECT_DIR)/target/$(DOMAIN)
TEMPLATE_DIR := $(WORKFLOW_DIR)/src/ontology/templates

# Source directories
SOURCE_TEMPLATE_DIR := templates
SOURCE_SCRIPTS_DIR := scriptsToShip

# Template files to copy
TEMPLATE_FILES := classes.tsv properties.tsv sample-data.tsv

# Source and destination file paths for templates
SOURCE_FILES := $(addprefix $(SOURCE_TEMPLATE_DIR)/, $(TEMPLATE_FILES))
DEST_FILES := $(addprefix $(TEMPLATE_DIR)/, $(TEMPLATE_FILES))

# File Mappings:
SOURCE_MAKEFILE := $(SOURCE_SCRIPTS_DIR)/Makefile
DEST_MAKEFILE := $(WORKFLOW_DIR)/src/ontology/lco.Makefile

.PHONY: all copy-all copy-templates copy-makefile copy-classes copy-properties copy-sample-data clean clean-makefile clean-all help check-source check-dest setup-dirs

# Default target
all: copy-all

# Copy all files (templates and Makefile)
copy-all: copy-templates copy-makefile
	@echo "‚úÖ All files copied successfully"
	@echo "üìÅ Templates destination: $(TEMPLATE_DIR)"
	@echo "üìÅ Makefile destination: $(WORKFLOW_DIR)"

# Copy all template files
copy-templates: setup-dirs $(DEST_FILES)
	@echo "‚úÖ All template files copied successfully"
	@echo "üìÅ Destination: $(TEMPLATE_DIR)"

# Copy Makefile
copy-makefile: setup-dirs $(DEST_MAKEFILE)
	@echo "‚úÖ Makefile copied successfully"
	@echo "üìÅ Destination: $(WORKFLOW_DIR)"

# Create necessary directories
setup-dirs:
	@echo "üìÅ Setting up directories..."
	@mkdir -p $(WORKFLOW_DIR)
	@mkdir -p $(TEMPLATE_DIR)
	@mkdir -p $(dir $(DEST_MAKEFILE))
	@echo "‚úÖ Directory created: $(WORKFLOW_DIR)"
	@echo "‚úÖ Directory created: $(TEMPLATE_DIR)"
	@echo "‚úÖ Directory created: $(dir $(DEST_MAKEFILE))"

# Individual copy targets
copy-classes: $(TEMPLATE_DIR)/classes.tsv

copy-properties: $(TEMPLATE_DIR)/properties.tsv

copy-sample-data: $(TEMPLATE_DIR)/sample-data.tsv

# Generic rule for copying template files
$(TEMPLATE_DIR)/%.tsv: $(SOURCE_TEMPLATE_DIR)/%.tsv | setup-dirs
	@if [ -f "$<" ]; then \
		echo "  ‚Ü≥ Copying $< to $@"; \
		cp "$<" "$@"; \
		echo "‚úÖ Copied: $(notdir $<)"; \
	else \
		echo "‚ùå Source file not found: $<"; \
		exit 1; \
	fi

# Rule for copying Makefile
$(DEST_MAKEFILE): $(SOURCE_MAKEFILE) | setup-dirs
	@if [ -f "$<" ]; then \
		echo "  ‚Ü≥ Copying $< to $@"; \
		cp "$<" "$@"; \
		echo "‚úÖ Copied: template.seeding.Makefile ‚Üí lco.Makefile"; \
	else \
		echo "‚ùå Source Makefile not found: $<"; \
		exit 1; \
	fi

# Check if source files exist
check-source:
	@echo "üîç Checking source template files..."
	@for file in $(SOURCE_FILES); do \
		if [ -f "$$file" ]; then \
			echo "‚úÖ Found: $$file"; \
		else \
			echo "‚ùå Missing: $$file"; \
		fi; \
	done
	@echo "üîç Checking source Makefile..."
	@if [ -f "$(SOURCE_MAKEFILE)" ]; then \
		echo "‚úÖ Found: $(SOURCE_MAKEFILE)"; \
	else \
		echo "‚ùå Missing: $(SOURCE_MAKEFILE)"; \
	fi

# Check destination directory and files
check-dest:
	@echo "üîç Checking destination..."
	@if [ -d "$(WORKFLOW_DIR)" ]; then \
		echo "‚úÖ Workflow directory exists: $(WORKFLOW_DIR)"; \
	else \
		echo "‚ö†Ô∏è  Workflow directory doesn't exist: $(WORKFLOW_DIR)"; \
	fi
	@if [ -d "$(TEMPLATE_DIR)" ]; then \
		echo "‚úÖ Template directory exists: $(TEMPLATE_DIR)"; \
		for file in $(DEST_FILES); do \
			if [ -f "$$file" ]; then \
				echo "‚úÖ Found: $$file"; \
			else \
				echo "‚ö†Ô∏è  Not found: $$file"; \
			fi; \
		done; \
	else \
		echo "‚ö†Ô∏è  Template directory doesn't exist: $(TEMPLATE_DIR)"; \
	fi
	@if [ -f "$(DEST_MAKEFILE)" ]; then \
		echo "‚úÖ Found: $(DEST_MAKEFILE)"; \
	else \
		echo "‚ö†Ô∏è  Not found: $(DEST_MAKEFILE)"; \
	fi

# Compare source and destination files
compare:
	@echo "üîç Comparing source and destination files..."
	@for file in $(TEMPLATE_FILES); do \
		src="$(SOURCE_TEMPLATE_DIR)/$$file"; \
		dest="$(TEMPLATE_DIR)/$$file"; \
		if [ -f "$$src" ] && [ -f "$$dest" ]; then \
			if cmp -s "$$src" "$$dest"; then \
				echo "‚úÖ $$file: Files are identical"; \
			else \
				echo "‚ö†Ô∏è  $$file: Files differ"; \
			fi; \
		elif [ -f "$$src" ]; then \
			echo "‚ö†Ô∏è  $$file: Source exists, destination missing"; \
		elif [ -f "$$dest" ]; then \
			echo "‚ö†Ô∏è  $$file: Destination exists, source missing"; \
		else \
			echo "‚ùå $$file: Neither source nor destination exists"; \
		fi; \
	done
	@echo "üîç Comparing Makefile..."
	@if [ -f "$(SOURCE_MAKEFILE)" ] && [ -f "$(DEST_MAKEFILE)" ]; then \
		if cmp -s "$(SOURCE_MAKEFILE)" "$(DEST_MAKEFILE)"; then \
			echo "‚úÖ Makefile: Files are identical"; \
		else \
			echo "‚ö†Ô∏è  Makefile: Files differ"; \
		fi; \
	elif [ -f "$(SOURCE_MAKEFILE)" ]; then \
		echo "‚ö†Ô∏è  Makefile: Source exists, destination missing"; \
	elif [ -f "$(DEST_MAKEFILE)" ]; then \
		echo "‚ö†Ô∏è  Makefile: Destination exists, source missing"; \
	else \
		echo "‚ùå Makefile: Neither source nor destination exists"; \
	fi

# Force copy (overwrite existing files)
force-copy: setup-dirs
	@echo "üîÑ Force copying all files..."
	@for file in $(TEMPLATE_FILES); do \
		src="$(SOURCE_TEMPLATE_DIR)/$$file"; \
		dest="$(TEMPLATE_DIR)/$$file"; \
		if [ -f "$$src" ]; then \
			echo "  ‚Ü≥ Force copying $$src to $$dest"; \
			cp "$$src" "$$dest"; \
			echo "‚úÖ Force copied: $$file"; \
		else \
			echo "‚ùå Source file not found: $$src"; \
		fi; \
	done
	@if [ -f "$(SOURCE_MAKEFILE)" ]; then \
		echo "  ‚Ü≥ Force copying $(SOURCE_MAKEFILE) to $(DEST_MAKEFILE)"; \
		cp "$(SOURCE_MAKEFILE)" "$(DEST_MAKEFILE)"; \
		echo "‚úÖ Force copied: Makefile"; \
	else \
		echo "‚ùå Source Makefile not found: $(SOURCE_MAKEFILE)"; \
	fi

# Sync files (copy only if source is newer)
sync:
	@echo "üîÑ Syncing all files..."
	@for file in $(TEMPLATE_FILES); do \
		src="$(SOURCE_TEMPLATE_DIR)/$$file"; \
		dest="$(TEMPLATE_DIR)/$$file"; \
		if [ -f "$$src" ]; then \
			if [ ! -f "$$dest" ] || [ "$$src" -nt "$$dest" ]; then \
				echo "  ‚Ü≥ Syncing $$src to $$dest"; \
				mkdir -p "$$(dirname "$$dest")"; \
				cp "$$src" "$$dest"; \
				echo "‚úÖ Synced: $$file"; \
			else \
				echo "‚è≠Ô∏è  Skipped (up to date): $$file"; \
			fi; \
		else \
			echo "‚ùå Source file not found: $$src"; \
		fi; \
	done
	@if [ -f "$(SOURCE_MAKEFILE)" ]; then \
		if [ ! -f "$(DEST_MAKEFILE)" ] || [ "$(SOURCE_MAKEFILE)" -nt "$(DEST_MAKEFILE)" ]; then \
			echo "  ‚Ü≥ Syncing $(SOURCE_MAKEFILE) to $(DEST_MAKEFILE)"; \
			mkdir -p "$$(dirname "$(DEST_MAKEFILE)")"; \
			cp "$(SOURCE_MAKEFILE)" "$(DEST_MAKEFILE)"; \
			echo "‚úÖ Synced: Makefile"; \
		else \
			echo "‚è≠Ô∏è  Skipped (up to date): Makefile"; \
		fi; \
	else \
		echo "‚ùå Source Makefile not found: $(SOURCE_MAKEFILE)"; \
	fi

# Clean destination template files only (preserve directories)
clean:
	@echo "üßπ Cleaning destination template files..."
	@for file in $(DEST_FILES); do \
		if [ -f "$$file" ]; then \
			echo "  ‚Ü≥ Removing $$file"; \
			rm -f "$$file"; \
		fi; \
	done
	@echo "‚úÖ Cleaned template files (directories preserved)"

# Clean Makefile only (preserve directories)
clean-makefile:
	@echo "üßπ Cleaning destination Makefile..."
	@if [ -f "$(DEST_MAKEFILE)" ]; then \
		echo "  ‚Ü≥ Removing $(DEST_MAKEFILE)"; \
		rm -f "$(DEST_MAKEFILE)"; \
		echo "‚úÖ Cleaned Makefile (directories preserved)"; \
	else \
		echo "‚ö†Ô∏è  Makefile doesn't exist"; \
	fi

# Clean all copied files only (preserve directory structure)
clean-all:
	@echo "üßπ Cleaning all copied files..."
	@echo "  ‚Üí Cleaning template files..."
	@for file in $(DEST_FILES); do \
		if [ -f "$$file" ]; then \
			echo "    ‚Ü≥ Removing $$file"; \
			rm -f "$$file"; \
		fi; \
	done
	@echo "  ‚Üí Cleaning Makefile..."
	@if [ -f "$(DEST_MAKEFILE)" ]; then \
		echo "    ‚Ü≥ Removing $(DEST_MAKEFILE)"; \
		rm -f "$(DEST_MAKEFILE)"; \
	fi
	@echo "‚úÖ Cleaned all copied files (directory structure preserved)"

# Show file statistics
stats:
	@echo "üìä Files Statistics:"
	@echo "Source Template Directory: $(SOURCE_TEMPLATE_DIR)"
	@echo "Source Scripts Directory: $(SOURCE_SCRIPTS_DIR)"
	@echo "Destination Template Directory: $(TEMPLATE_DIR)"
	@echo "Destination Workflow Directory: $(WORKFLOW_DIR)"
	@echo ""
	@for file in $(TEMPLATE_FILES); do \
		src="$(SOURCE_TEMPLATE_DIR)/$$file"; \
		dest="$(TEMPLATE_DIR)/$$file"; \
		echo "$$file:"; \
		if [ -f "$$src" ]; then \
			src_size=$$(wc -l < "$$src" 2>/dev/null || echo "0"); \
			echo "  Source: $$src_size lines"; \
		else \
			echo "  Source: Not found"; \
		fi; \
		if [ -f "$$dest" ]; then \
			dest_size=$$(wc -l < "$$dest" 2>/dev/null || echo "0"); \
			echo "  Destination: $$dest_size lines"; \
		else \
			echo "  Destination: Not found"; \
		fi; \
		echo ""; \
	done
	@echo "Makefile:"
	@if [ -f "$(SOURCE_MAKEFILE)" ]; then \
		src_size=$$(wc -l < "$(SOURCE_MAKEFILE)" 2>/dev/null || echo "0"); \
		echo "  Source: $$src_size lines"; \
	else \
		echo "  Source: Not found"; \
	fi
	@if [ -f "$(DEST_MAKEFILE)" ]; then \
		dest_size=$$(wc -l < "$(DEST_MAKEFILE)" 2>/dev/null || echo "0"); \
		echo "  Destination: $$dest_size lines"; \
	else \
		echo "  Destination: Not found"; \
	fi

# Help target
help:
	@echo "üìã Seeding Files Copy Makefile"
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Copy all files (templates + Makefile) (default)"
	@echo "  copy-all         - Copy all files (templates + Makefile)"
	@echo "  copy-templates   - Copy template files only"
	@echo "  copy-makefile    - Copy Makefile only"
	@echo "  copy-classes     - Copy classes.tsv only"
	@echo "  copy-properties  - Copy properties.tsv only"
	@echo "  copy-sample-data - Copy sample-data.tsv only"
	@echo ""
	@echo "Advanced targets:"
	@echo "  force-copy       - Force copy all files (overwrite existing)"
	@echo "  sync             - Copy only if source is newer"
	@echo "  compare          - Compare source and destination files"
	@echo ""
	@echo "Information targets:"
	@echo "  check-source     - Check if source files exist"
	@echo "  check-dest       - Check destination directory and files"
	@echo "  stats            - Show file statistics"
	@echo ""
	@echo "Maintenance targets:"
	@echo "  setup-dirs       - Create destination directories"
	@echo "  clean            - Remove destination template files (preserve dirs)"
	@echo "  clean-makefile   - Remove destination Makefile only (preserve dirs)"
	@echo "  clean-all        - Remove all copied files (preserve directory structure)"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Configuration:"
	@echo "  SOURCE_TEMPLATE_DIR  = $(SOURCE_TEMPLATE_DIR)"
	@echo "  SOURCE_SCRIPTS_DIR   = $(SOURCE_SCRIPTS_DIR)"
	@echo "  TEMPLATE_DIR         = $(TEMPLATE_DIR)"
	@echo "  WORKFLOW_DIR         = $(WORKFLOW_DIR)"
	@echo "  PROJECT_DIR          = $(PROJECT_DIR)"
	@echo ""
	@echo "File Mappings:"
	@echo "  Templates: $(SOURCE_TEMPLATE_DIR)/*.tsv ‚Üí $(TEMPLATE_DIR)/*.tsv"
	@echo "  Makefile:  $(SOURCE_MAKEFILE) ‚Üí $(DEST_MAKEFILE)"
	@echo ""
	@echo "Examples:"
	@echo "  make                     # Copy all files"
	@echo "  make copy-templates      # Copy templates only"
	@echo "  make copy-makefile       # Copy Makefile only"
	@echo "  make sync                # Sync files (copy if newer)"
	@echo "  make force-copy          # Overwrite existing files"
	@echo "  make check-source        # Verify source files exist"